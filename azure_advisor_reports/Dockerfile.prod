# ============================================================================
# Multi-Stage Production Dockerfile for Azure Advisor Reports Backend
# ============================================================================
# This Dockerfile uses multi-stage builds to optimize the final image size
# and security by separating the build environment from the runtime environment.
# ============================================================================

# ============================================================================
# Stage 1: Builder - Install dependencies and build Python packages
# ============================================================================
FROM python:3.11-slim as builder

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set work directory
WORKDIR /build

# Install system dependencies required for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL client library headers
    libpq-dev \
    # GCC compiler for building Python packages
    gcc \
    g++ \
    wget \
    # WeasyPrint dependencies
    libcairo2 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf-2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Playwright/Chromium dependencies for PDF generation
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    libatspi2.0-0 \
    # Git for version control (optional)
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies to user directory
# This allows us to copy only the installed packages to the runtime stage
RUN pip install --user --no-cache-dir -r requirements.txt

# Install Playwright browsers (Chromium for PDF generation)
# Note: We don't use --with-deps because we already installed dependencies manually above
RUN /root/.local/bin/playwright install chromium

# ============================================================================
# Stage 2: Runtime - Final production image
# ============================================================================
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DJANGO_SETTINGS_MODULE=azure_advisor_reports.settings.production \
    DJANGO_ENVIRONMENT=production

# Set work directory
WORKDIR /app

# Install runtime dependencies only (no build tools)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL client library
    libpq5 \
    # WeasyPrint runtime dependencies
    libcairo2 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf-2.0-0 \
    shared-mime-info \
    # Playwright/Chromium runtime dependencies
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    libatspi2.0-0 \
    # Fonts for PDF generation
    fonts-liberation \
    fonts-dejavu-core \
    fonts-noto-color-emoji \
    # Curl for health checks
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security BEFORE copying Python packages
RUN groupadd -r appuser && useradd -r -g appuser -u 1000 -m appuser \
    && mkdir -p /app/staticfiles /app/media /app/logs \
    && chown -R appuser:appuser /app

# Copy Python dependencies from builder stage to appuser's home directory
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# Update PATH to include appuser's local bin directory
ENV PATH=/home/appuser/.local/bin:$PATH

# Copy application code
COPY --chown=appuser:appuser . /app/

# Switch to non-root user
USER appuser

# Collect static files
# Note: This requires environment variables to be set, so it may fail in build
# Consider moving this to a startup script or CI/CD pipeline
# RUN python manage.py collectstatic --no-input --settings=azure_advisor_reports.settings.production || true

# Expose port
EXPOSE 8000

# Health check
# This health check uses curl to verify the application is responding
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Copy and setup entrypoint script
COPY --chown=appuser:appuser docker-entrypoint.sh /app/docker-entrypoint.sh

# Make entrypoint executable
USER root
RUN chmod +x /app/docker-entrypoint.sh
USER appuser

# Set entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# ============================================================================
# Build and Run Instructions:
# ============================================================================
#
# Build the image (from project root):
#   cd azure_advisor_reports
#   docker build -f Dockerfile.prod -t azure-advisor-backend:prod .
#
# Or build from project root with context:
#   docker build -f azure_advisor_reports/Dockerfile.prod -t azure-advisor-backend:prod azure_advisor_reports
#
# Run the container:
#   docker run -d \
#     --name azure-advisor-backend \
#     -p 8000:8000 \
#     --env-file .env.production \
#     azure-advisor-backend:prod
#
# Run with custom Gunicorn settings:
#   docker run -d \
#     -p 8000:8000 \
#     -e GUNICORN_WORKERS=8 \
#     -e GUNICORN_TIMEOUT=180 \
#     --env-file .env.production \
#     azure-advisor-backend:prod
#
# Build for Azure Container Registry (run from project root):
#   az acr build --registry <registry-name> \
#     --image azure-advisor-backend:latest \
#     --image azure-advisor-backend:v1.0.1 \
#     --file azure_advisor_reports/Dockerfile.prod \
#     azure_advisor_reports
#
# ============================================================================
# Environment Variables Required:
# ============================================================================
# See .env.production.template for a complete list of required environment
# variables. Key variables include:
#
#   - SECRET_KEY
#   - DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
#   - REDIS_URL, REDIS_PASSWORD
#   - AZURE_STORAGE_ACCOUNT_NAME, AZURE_STORAGE_ACCOUNT_KEY
#   - AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
#   - APPLICATIONINSIGHTS_CONNECTION_STRING
#   - ALLOWED_HOSTS
#   - CORS_ALLOWED_ORIGINS
# ============================================================================
