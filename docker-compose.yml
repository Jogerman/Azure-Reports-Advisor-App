services:
  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: azure-advisor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: azure_advisor_reports
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - azure-advisor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d azure_advisor_reports"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Redis Cache & Message Broker
  # ================================
  redis:
    image: redis:7-alpine
    container_name: azure-advisor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - azure-advisor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Backend API (Django)
  # ================================
  backend:
    build:
      context: ./azure_advisor_reports
      dockerfile: Dockerfile
    container_name: azure-advisor-backend
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/azure_advisor_reports
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - CORS_ALLOW_ALL_ORIGINS=True
    volumes:
      - ./azure_advisor_reports:/app
      - media_data:/app/media
      - static_data:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - azure-advisor-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Celery Worker
  # ================================
  celery-worker:
    build:
      context: ./azure_advisor_reports
      dockerfile: Dockerfile
    container_name: azure-advisor-celery-worker
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/azure_advisor_reports
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./azure_advisor_reports:/app
      - media_data:/app/media
    networks:
      - azure-advisor-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A azure_advisor_reports worker -l info --concurrency=2
    healthcheck:
      test: ["CMD-SHELL", "celery -A azure_advisor_reports inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Celery Beat (Scheduler)
  # ================================
  celery-beat:
    build:
      context: ./azure_advisor_reports
      dockerfile: Dockerfile
    container_name: azure-advisor-celery-beat
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/azure_advisor_reports
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./azure_advisor_reports:/app
    networks:
      - azure-advisor-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A azure_advisor_reports beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # ================================
  # Frontend (React)
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: azure-advisor-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - REACT_APP_AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - REACT_APP_AZURE_REDIRECT_URI=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - azure-advisor-network
    depends_on:
      - backend
    command: npm start
    stdin_open: true
    tty: true

  # ================================
  # Redis Insights (Optional GUI)
  # ================================
  redis-insights:
    image: redislabs/redisinsight:latest
    container_name: azure-advisor-redis-insights
    restart: unless-stopped
    ports:
      - "8001:8001"
    networks:
      - azure-advisor-network
    depends_on:
      - redis
    profiles:
      - tools

  # ================================
  # pgAdmin (Optional GUI)
  # ================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: azure-advisor-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@azureadvisor.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    networks:
      - azure-advisor-network
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - tools

# ================================
# Named Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  frontend_node_modules:
    driver: local
  pgadmin_data:
    driver: local

# ================================
# Networks
# ================================
networks:
  azure-advisor-network:
    driver: bridge
    name: azure-advisor-network