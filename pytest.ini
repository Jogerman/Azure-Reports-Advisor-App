[pytest]
# Pytest configuration for Azure Advisor Reports Platform
DJANGO_SETTINGS_MODULE = azure_advisor_reports.settings

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test* *Tests *TestCase
python_functions = test_*

# Additional test paths
testpaths = azure_advisor_reports

# Markers for categorizing tests
markers =
    unit: Unit tests that test a single function or class in isolation
    integration: Integration tests that test multiple components together
    slow: Tests that take a long time to run
    celery: Tests that involve Celery tasks
    csv: Tests related to CSV processing
    permissions: Tests related to permissions and authorization
    api: Tests for API endpoints
    models: Tests for Django models
    serializers: Tests for DRF serializers
    views: Tests for views and viewsets
    services: Tests for service layer functions
    analytics: Tests for analytics functionality
    authentication: Tests for authentication functionality
    clients: Tests for client management

# Coverage options
addopts =
    --verbose
    --strict-markers
    --tb=short
    --cov=azure_advisor_reports/apps
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=json:coverage.json
    --cov-fail-under=85
    --maxfail=5
    --disable-warnings
    -ra

# Django database configuration for tests
# Use in-memory SQLite for faster tests
DJANGO_DB = sqlite

# Ignore certain paths during test collection
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    migrations
    static
    media
    htmlcov
    node_modules
    frontend
    venv
    __pycache__

# Output configuration
console_output_style = progress

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Timeout for tests (in seconds)
timeout = 300

# Parallel test execution (uncomment to enable)
# addopts = -n auto

# Coverage source
[coverage:run]
source = azure_advisor_reports/apps
omit =
    */migrations/*
    */tests/*
    */test_*.py
    */__init__.py
    */admin.py
    */apps.py
    */conftest.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    class .*\bProtocol\):
    @overload

[coverage:html]
directory = htmlcov
