# ============================================================================
# Multi-Stage Production Dockerfile for Azure Advisor Reports Backend
# ============================================================================
# This Dockerfile uses multi-stage builds to optimize the final image size
# and security by separating the build environment from the runtime environment.
# ============================================================================

# ============================================================================
# Stage 1: Builder - Install dependencies and build Python packages
# ============================================================================
FROM python:3.11-slim as builder

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set work directory
WORKDIR /build

# Install system dependencies required for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL client library headers
    libpq-dev \
    # GCC compiler for building Python packages
    gcc \
    g++ \
    wget \
    # WeasyPrint dependencies
    libcairo2 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    # Playwright/Chromium dependencies for PDF generation
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    libatspi2.0-0 \
    # Git for version control (optional)
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY azure_advisor_reports/requirements.txt .

# Install Python dependencies to user directory
# This allows us to copy only the installed packages to the runtime stage
RUN pip install --user --no-cache-dir -r requirements.txt

# Install Playwright browsers (Chromium for PDF generation)
RUN /root/.local/bin/playwright install chromium --with-deps

# ============================================================================
# Stage 2: Runtime - Final production image
# ============================================================================
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH=/root/.local/bin:$PATH \
    DJANGO_SETTINGS_MODULE=azure_advisor_reports.settings.production \
    DJANGO_ENVIRONMENT=production

# Set work directory
WORKDIR /app

# Install runtime dependencies only (no build tools)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL client library
    libpq5 \
    # WeasyPrint runtime dependencies
    libcairo2 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libgdk-pixbuf2.0-0 \
    shared-mime-info \
    # Playwright/Chromium runtime dependencies
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libxkbcommon0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libasound2 \
    libatspi2.0-0 \
    # Fonts for PDF generation
    fonts-liberation \
    fonts-dejavu-core \
    fonts-noto-color-emoji \
    # Curl for health checks
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies from builder stage
COPY --from=builder /root/.local /root/.local

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser -u 1000 appuser \
    && mkdir -p /app/staticfiles /app/media /app/logs \
    && chown -R appuser:appuser /app

# Copy application code
COPY --chown=appuser:appuser azure_advisor_reports/ /app/

# Switch to non-root user
USER appuser

# Create necessary directories
RUN mkdir -p /app/staticfiles /app/media /app/logs

# Collect static files
# Note: This requires environment variables to be set, so it may fail in build
# Consider moving this to a startup script or CI/CD pipeline
# RUN python manage.py collectstatic --no-input --settings=azure_advisor_reports.settings.production || true

# Expose port
EXPOSE 8000

# Health check
# This health check uses curl to verify the application is responding
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Start script
# We use a shell script to run migrations and then start Gunicorn
COPY --chown=appuser:appuser <<'EOF' /app/docker-entrypoint.sh
#!/bin/sh
set -e

echo "Starting Azure Advisor Reports Backend..."

# Wait for database to be ready
echo "Waiting for database connection..."
python << END
import sys
import time
import psycopg2
from decouple import config

max_retries = 30
retry_interval = 2

for i in range(max_retries):
    try:
        conn = psycopg2.connect(
            dbname=config('DB_NAME'),
            user=config('DB_USER'),
            password=config('DB_PASSWORD'),
            host=config('DB_HOST'),
            port=config('DB_PORT', default='5432')
        )
        conn.close()
        print("Database is ready!")
        sys.exit(0)
    except psycopg2.OperationalError as e:
        if i < max_retries - 1:
            print(f"Database not ready yet, retrying in {retry_interval}s... ({i+1}/{max_retries})")
            time.sleep(retry_interval)
        else:
            print("Could not connect to database!")
            sys.exit(1)
END

# Run database migrations
echo "Running database migrations..."
python manage.py migrate --no-input

# Collect static files
echo "Collecting static files..."
python manage.py collectstatic --no-input --clear

# Create cache table if needed
echo "Setting up cache table..."
python manage.py createcachetable || true

# Start Gunicorn
echo "Starting Gunicorn server..."
exec gunicorn azure_advisor_reports.wsgi:application \
    --bind 0.0.0.0:8000 \
    --workers ${GUNICORN_WORKERS:-4} \
    --threads ${GUNICORN_THREADS:-2} \
    --worker-class gthread \
    --worker-tmp-dir /dev/shm \
    --timeout ${GUNICORN_TIMEOUT:-120} \
    --graceful-timeout ${GUNICORN_GRACEFUL_TIMEOUT:-30} \
    --max-requests ${GUNICORN_MAX_REQUESTS:-1000} \
    --max-requests-jitter ${GUNICORN_MAX_REQUESTS_JITTER:-50} \
    --access-logfile - \
    --error-logfile - \
    --log-level ${GUNICORN_LOG_LEVEL:-info} \
    --capture-output \
    --enable-stdio-inheritance
EOF

# Make entrypoint executable
USER root
RUN chmod +x /app/docker-entrypoint.sh
USER appuser

# Set entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# ============================================================================
# Build and Run Instructions:
# ============================================================================
#
# Build the image:
#   docker build -f Dockerfile.prod -t azure-advisor-backend:prod .
#
# Run the container:
#   docker run -d \
#     --name azure-advisor-backend \
#     -p 8000:8000 \
#     --env-file .env.production \
#     azure-advisor-backend:prod
#
# Run with custom Gunicorn settings:
#   docker run -d \
#     -p 8000:8000 \
#     -e GUNICORN_WORKERS=8 \
#     -e GUNICORN_TIMEOUT=180 \
#     --env-file .env.production \
#     azure-advisor-backend:prod
#
# Build for Azure Container Registry:
#   az acr build --registry <registry-name> \
#     --image azure-advisor-backend:latest \
#     --image azure-advisor-backend:v1.0.0 \
#     --file Dockerfile.prod .
#
# ============================================================================
# Environment Variables Required:
# ============================================================================
# See .env.production.template for a complete list of required environment
# variables. Key variables include:
#
#   - SECRET_KEY
#   - DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
#   - REDIS_URL, REDIS_PASSWORD
#   - AZURE_STORAGE_ACCOUNT_NAME, AZURE_STORAGE_ACCOUNT_KEY
#   - AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
#   - APPLICATIONINSIGHTS_CONNECTION_STRING
#   - ALLOWED_HOSTS
#   - CORS_ALLOWED_ORIGINS
# ============================================================================
