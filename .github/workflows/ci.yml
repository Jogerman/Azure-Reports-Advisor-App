name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # ================================
  # Backend Testing
  # ================================
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11']

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_azure_advisor_reports
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r azure_advisor_reports/requirements.txt
        pip install -r azure_advisor_reports/requirements-dev.txt

    - name: Run Django system checks
      working-directory: ./azure_advisor_reports
      env:
        SECRET_KEY: test-secret-key-for-ci
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_azure_advisor_reports
        REDIS_URL: redis://localhost:6379/0
        DEBUG: False
      run: |
        python manage.py check --deploy

    - name: Run Django migrations
      working-directory: ./azure_advisor_reports
      env:
        SECRET_KEY: test-secret-key-for-ci
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_azure_advisor_reports
        REDIS_URL: redis://localhost:6379/0
        DEBUG: False
      run: |
        python manage.py migrate

    - name: Run tests with coverage
      working-directory: ./azure_advisor_reports
      env:
        SECRET_KEY: test-secret-key-for-ci
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_azure_advisor_reports
        REDIS_URL: redis://localhost:6379/0
        DEBUG: False
      run: |
        pytest --cov=apps --cov-report=xml --cov-report=html --junitxml=junit.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./azure_advisor_reports/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests
        path: './azure_advisor_reports/junit.xml'
        reporter: java-junit

  # ================================
  # Backend Linting & Security
  # ================================
  backend-linting:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-linting-${{ hashFiles('**/requirements*.txt') }}

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit pylint safety

    - name: Run Black (code formatting)
      run: |
        black --check --diff azure_advisor_reports/

    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff azure_advisor_reports/

    - name: Run Flake8 (linting)
      run: |
        flake8 azure_advisor_reports/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run Bandit (security linting)
      run: |
        bandit -r azure_advisor_reports/ -x azure_advisor_reports/tests/

    - name: Run Safety (security vulnerabilities)
      run: |
        safety check --file azure_advisor_reports/requirements.txt

  # ================================
  # Frontend Testing
  # ================================
  frontend-tests:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['18', '20']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run Prettier check
      working-directory: ./frontend
      run: npm run format:check

    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/clover.xml
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Frontend Tests
        path: './frontend/junit.xml'
        reporter: java-junit

  # ================================
  # Frontend Build Test
  # ================================
  frontend-build:
    name: Frontend Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      env:
        REACT_APP_API_URL: https://api.example.com/v1
        REACT_APP_AZURE_CLIENT_ID: test-client-id
        REACT_APP_AZURE_TENANT_ID: test-tenant-id
        CI: false
      run: npm run build

    - name: Test build artifacts
      working-directory: ./frontend
      run: |
        ls -la build/
        test -f build/index.html
        test -d build/static

  # ================================
  # Docker Build Tests
  # ================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./azure_advisor_reports
        file: ./azure_advisor_reports/Dockerfile
        push: false
        tags: azure-advisor-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: azure-advisor-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ================================
  # Security Scanning
  # ================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './azure_advisor_reports'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  # ================================
  # Integration Tests
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-integration
        DEBUG=True
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/azure_advisor_reports
        REDIS_URL=redis://localhost:6379/0
        AZURE_CLIENT_ID=test-client-id
        AZURE_CLIENT_SECRET=test-client-secret
        AZURE_TENANT_ID=test-tenant-id
        CORS_ALLOW_ALL_ORIGINS=True
        EOF

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d postgres redis
        sleep 10

    - name: Wait for services to be ready
      run: |
        docker-compose exec -T postgres pg_isready -U postgres
        docker-compose exec -T redis redis-cli ping

    - name: Run integration tests
      run: |
        echo "Integration tests would run here"
        echo "This could include end-to-end API tests, database integration tests, etc."

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  # ================================
  # Notification
  # ================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-linting, docker-build, security-scan, integration-tests]
    if: always()

    steps:
    - name: Notify on success
      if: needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        exit 1